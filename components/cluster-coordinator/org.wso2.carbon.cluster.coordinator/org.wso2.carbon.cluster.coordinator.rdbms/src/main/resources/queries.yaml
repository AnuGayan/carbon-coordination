################################################################################
#   Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved
#
#   Licensed under the Apache License, Version 2.0 (the \"License\");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an \"AS IS\" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
################################################################################

queries:
  -
   mappings:
      IS_LEADER_STATUS_TABLE_EXISTS:
      IS_CLUSTER_NODE_STATUS_TABLE_EXISTS:
      IS_MEMBERSHIP_EVENT_TABLE_EXISTS:
      IS_REMOVED_MEMBERS_TABLE_EXISTS:
      CREATE_LEADER_STATUS_TABLE:
      CREATE_CLUSTER_NODE_STATUS_TABLE:
      CREATE_MEMBERSHIP_EVENT_TABLE:
      CREATE_REMOVED_MEMBERS_TABLE:
      INSERT_COORDINATOR_ROW:
      INSERT_NODE_HEARTBEAT_ROW:
      INSERT_MEMBERSHIP_EVENT:
      INSERT_REMOVED_MEMBER_DETAILS:
      UPDATE_PROPERTIES_MAP:
      UPDATE_COORDINATOR_HEARTBEAT:
      UPDATE_NODE_HEARTBEAT:
      MARK_NODE_NOT_NEW:
      SELECT_MEMBERSHIP_EVENT:
      SELECT_REMOVED_MEMBER_DETAILS:
      GET_COORDINATOR_NODE_ID:
      GET_COORDINATOR_NODE:
      GET_COORDINATOR_ROW_FOR_NODE_ID:
      GET_COORDINATOR_HEARTBEAT:
      GET_ALL_NODE_HEARTBEAT:
      GET_NODE_DATA:
      DELETE_COORDINATOR:
      DELETE_NODE_HEARTBEAT:
      DELETE_REMOVED_MEMBER_DETAIL_FOR_NODE:
      CLEAR_NODE_HEARTBEATS:
      CLEAR_COORDINATOR_HEARTBEAT:
      CLEAR_ALL_MEMBERSHIP_EVENTS:
      CLEAN_MEMBERSHIP_EVENTS_FOR_NODE:

   type: default
   version: default

  -
   mappings:
      IS_LEADER_STATUS_TABLE_EXISTS: SELECT * FROM LEADER_STATUS_TABLE
      IS_CLUSTER_NODE_STATUS_TABLE_EXISTS: SELECT * FROM CLUSTER_NODE_STATUS_TABLE
      IS_MEMBERSHIP_EVENT_TABLE_EXISTS: SELECT * FROM MEMBERSHIP_EVENT_TABLE
      IS_REMOVED_MEMBERS_TABLE_EXISTS: SELECT * FROM REMOVED_MEMBERS_TABLE
      CREATE_LEADER_STATUS_TABLE: CREATE TABLE LEADER_STATUS_TABLE (GROUP_ID VARCHAR(512) NOT NULL, NODE_ID VARCHAR(512) NOT NULL, LAST_HEARTBEAT BIGINT NOT NULL, PRIMARY KEY (GROUP_ID))
      CREATE_CLUSTER_NODE_STATUS_TABLE: CREATE TABLE CLUSTER_NODE_STATUS_TABLE (GROUP_ID VARCHAR(512) NOT NULL, NODE_ID VARCHAR(512) NOT NULL, PROPERTY_MAP BLOB NOT NULL,IS_NEW_NODE INT NOT NULL, LAST_HEARTBEAT BIGINT NOT NULL, PRIMARY KEY (GROUP_ID,NODE_ID))
      CREATE_MEMBERSHIP_EVENT_TABLE: CREATE TABLE MEMBERSHIP_EVENT_TABLE (GROUP_ID VARCHAR(512) NOT NULL, NODE_ID VARCHAR(512) NOT NULL, CHANGE_TYPE INT NOT NULL, CHANGED_MEMBER_ID VARCHAR(512) NOT NULL)
      CREATE_REMOVED_MEMBERS_TABLE: CREATE TABLE REMOVED_MEMBERS_TABLE (GROUP_ID VARCHAR(512) NOT NULL, NODE_ID VARCHAR(512) NOT NULL, PROPERTY_MAP BLOB NOT NULL, REMOVED_MEMBER_ID VARCHAR(512) NOT NULL)
      INSERT_COORDINATOR_ROW: INSERT INTO LEADER_STATUS_TABLE (GROUP_ID, NODE_ID, LAST_HEARTBEAT) VALUES (?,?,?)
      INSERT_NODE_HEARTBEAT_ROW: INSERT INTO CLUSTER_NODE_STATUS_TABLE (NODE_ID, LAST_HEARTBEAT, GROUP_ID, PROPERTY_MAP, IS_NEW_NODE) VALUES (?,?,?,?,1)
      INSERT_MEMBERSHIP_EVENT: INSERT INTO MEMBERSHIP_EVENT_TABLE (NODE_ID, GROUP_ID, CHANGE_TYPE, CHANGED_MEMBER_ID) VALUES ( ?,?,?,?)
      INSERT_REMOVED_MEMBER_DETAILS: INSERT INTO REMOVED_MEMBERS_TABLE (NODE_ID, GROUP_ID, REMOVED_MEMBER_ID, PROPERTY_MAP) VALUES ( ?,?,?,?)
      UPDATE_PROPERTIES_MAP: UPDATE CLUSTER_NODE_STATUS_TABLE SET PROPERTY_MAP =? WHERE NODE_ID =? AND GROUP_ID =?
      UPDATE_COORDINATOR_HEARTBEAT: UPDATE LEADER_STATUS_TABLE SET LAST_HEARTBEAT =? WHERE NODE_ID =? AND GROUP_ID =?
      UPDATE_NODE_HEARTBEAT: UPDATE CLUSTER_NODE_STATUS_TABLE SET LAST_HEARTBEAT =? WHERE NODE_ID =? AND GROUP_ID =?
      MARK_NODE_NOT_NEW: UPDATE CLUSTER_NODE_STATUS_TABLE SET IS_NEW_NODE =0 WHERE NODE_ID =? AND GROUP_ID =?
      SELECT_MEMBERSHIP_EVENT: SELECT CHANGE_TYPE, CHANGED_MEMBER_ID, GROUP_ID FROM MEMBERSHIP_EVENT_TABLE WHERE NODE_ID =? ORDER BY CHANGE_TYPE
      SELECT_REMOVED_MEMBER_DETAILS: SELECT REMOVED_MEMBER_ID, PROPERTY_MAP, GROUP_ID FROM REMOVED_MEMBERS_TABLE WHERE NODE_ID =? AND REMOVED_MEMBER_ID =? AND GROUP_ID =?
      GET_COORDINATOR_NODE_ID: SELECT NODE_ID FROM LEADER_STATUS_TABLE WHERE GROUP_ID =?
      GET_COORDINATOR_NODE: SELECT PROPERTY_MAP FROM CLUSTER_NODE_STATUS_TABLE WHERE GROUP_ID =? AND NODE_ID =?
      GET_COORDINATOR_ROW_FOR_NODE_ID: SELECT LAST_HEARTBEAT FROM LEADER_STATUS_TABLE WHERE NODE_ID =? AND GROUP_ID =?
      GET_COORDINATOR_HEARTBEAT: SELECT LAST_HEARTBEAT FROM LEADER_STATUS_TABLE WHERE GROUP_ID =?
      GET_ALL_NODE_HEARTBEAT: SELECT GROUP_ID, NODE_ID, PROPERTY_MAP, LAST_HEARTBEAT, IS_NEW_NODE FROM CLUSTER_NODE_STATUS_TABLE WHERE GROUP_ID=?
      GET_NODE_DATA: SELECT GROUP_ID, NODE_ID, PROPERTY_MAP, LAST_HEARTBEAT, IS_NEW_NODE FROM CLUSTER_NODE_STATUS_TABLE WHERE GROUP_ID=? AND NODE_ID=?
      DELETE_COORDINATOR: DELETE FROM LEADER_STATUS_TABLE WHERE GROUP_ID =? AND LAST_HEARTBEAT < ?
      DELETE_NODE_HEARTBEAT: DELETE FROM CLUSTER_NODE_STATUS_TABLE WHERE NODE_ID =? AND GROUP_ID =?
      DELETE_REMOVED_MEMBER_DETAIL_FOR_NODE: DELETE FROM REMOVED_MEMBERS_TABLE WHERE NODE_ID =? AND REMOVED_MEMBER_ID =? AND  GROUP_ID =?
      CLEAR_NODE_HEARTBEATS: DELETE FROM CLUSTER_NODE_STATUS_TABLE
      CLEAR_COORDINATOR_HEARTBEAT: DELETE FROM LEADER_STATUS_TABLE
      CLEAR_ALL_MEMBERSHIP_EVENTS: DELETE FROM  MEMBERSHIP_EVENT_TABLE
      CLEAN_MEMBERSHIP_EVENTS_FOR_NODE: DELETE FROM MEMBERSHIP_EVENT_TABLE WHERE NODE_ID =?

   type: H2
   version: default

  -
   mappings:
      IS_LEADER_STATUS_TABLE_EXISTS: SELECT * FROM LEADER_STATUS_TABLE
      IS_CLUSTER_NODE_STATUS_TABLE_EXISTS: SELECT * FROM CLUSTER_NODE_STATUS_TABLE
      IS_MEMBERSHIP_EVENT_TABLE_EXISTS: SELECT * FROM MEMBERSHIP_EVENT_TABLE
      IS_REMOVED_MEMBERS_TABLE_EXISTS: SELECT * FROM REMOVED_MEMBERS_TABLE
      CREATE_LEADER_STATUS_TABLE: CREATE TABLE LEADER_STATUS_TABLE (GROUP_ID VARCHAR(512) NOT NULL, NODE_ID VARCHAR(512) NOT NULL, LAST_HEARTBEAT BIGINT NOT NULL, PRIMARY KEY (GROUP_ID))
      CREATE_CLUSTER_NODE_STATUS_TABLE: CREATE TABLE CLUSTER_NODE_STATUS_TABLE (GROUP_ID VARCHAR(512) NOT NULL, NODE_ID VARCHAR(512) NOT NULL, PROPERTY_MAP BLOB NOT NULL,IS_NEW_NODE INT NOT NULL, LAST_HEARTBEAT BIGINT NOT NULL, PRIMARY KEY (GROUP_ID,NODE_ID))
      CREATE_MEMBERSHIP_EVENT_TABLE: CREATE TABLE MEMBERSHIP_EVENT_TABLE (GROUP_ID VARCHAR(512) NOT NULL, NODE_ID VARCHAR(512) NOT NULL, CHANGE_TYPE INT NOT NULL, CHANGED_MEMBER_ID VARCHAR(512) NOT NULL)
      CREATE_REMOVED_MEMBERS_TABLE: CREATE TABLE REMOVED_MEMBERS_TABLE (GROUP_ID VARCHAR(512) NOT NULL, NODE_ID VARCHAR(512) NOT NULL, PROPERTY_MAP BLOB NOT NULL, REMOVED_MEMBER_ID VARCHAR(512) NOT NULL)
      INSERT_COORDINATOR_ROW: INSERT INTO LEADER_STATUS_TABLE (GROUP_ID, NODE_ID, LAST_HEARTBEAT) VALUES (?,?,?)
      INSERT_NODE_HEARTBEAT_ROW: INSERT INTO CLUSTER_NODE_STATUS_TABLE (NODE_ID, LAST_HEARTBEAT, GROUP_ID, PROPERTY_MAP, IS_NEW_NODE) VALUES (?,?,?,?,1)
      INSERT_MEMBERSHIP_EVENT: INSERT INTO MEMBERSHIP_EVENT_TABLE (NODE_ID, GROUP_ID, CHANGE_TYPE, CHANGED_MEMBER_ID) VALUES ( ?,?,?,?)
      INSERT_REMOVED_MEMBER_DETAILS: INSERT INTO REMOVED_MEMBERS_TABLE (NODE_ID, GROUP_ID, REMOVED_MEMBER_ID, PROPERTY_MAP) VALUES ( ?,?,?,?)
      UPDATE_PROPERTIES_MAP: UPDATE CLUSTER_NODE_STATUS_TABLE SET PROPERTY_MAP =? WHERE NODE_ID =? AND GROUP_ID =?
      UPDATE_COORDINATOR_HEARTBEAT: UPDATE LEADER_STATUS_TABLE SET LAST_HEARTBEAT =? WHERE NODE_ID =? AND GROUP_ID =?
      UPDATE_NODE_HEARTBEAT: UPDATE CLUSTER_NODE_STATUS_TABLE SET LAST_HEARTBEAT =? WHERE NODE_ID =? AND GROUP_ID =?
      MARK_NODE_NOT_NEW: UPDATE CLUSTER_NODE_STATUS_TABLE SET IS_NEW_NODE =0 WHERE NODE_ID =? AND GROUP_ID =?
      SELECT_MEMBERSHIP_EVENT: SELECT CHANGE_TYPE, CHANGED_MEMBER_ID, GROUP_ID FROM MEMBERSHIP_EVENT_TABLE WHERE NODE_ID =? ORDER BY CHANGE_TYPE
      SELECT_REMOVED_MEMBER_DETAILS: SELECT REMOVED_MEMBER_ID, PROPERTY_MAP, GROUP_ID FROM REMOVED_MEMBERS_TABLE WHERE NODE_ID =? AND REMOVED_MEMBER_ID =? AND GROUP_ID =?
      GET_COORDINATOR_NODE_ID: SELECT NODE_ID FROM LEADER_STATUS_TABLE WHERE GROUP_ID =?
      GET_COORDINATOR_NODE: SELECT PROPERTY_MAP FROM CLUSTER_NODE_STATUS_TABLE WHERE GROUP_ID =? AND NODE_ID =?
      GET_COORDINATOR_ROW_FOR_NODE_ID: SELECT LAST_HEARTBEAT FROM LEADER_STATUS_TABLE WHERE NODE_ID =? AND GROUP_ID =?
      GET_COORDINATOR_HEARTBEAT: SELECT LAST_HEARTBEAT FROM LEADER_STATUS_TABLE WHERE GROUP_ID =?
      GET_ALL_NODE_HEARTBEAT: SELECT GROUP_ID, NODE_ID, PROPERTY_MAP, LAST_HEARTBEAT, IS_NEW_NODE FROM CLUSTER_NODE_STATUS_TABLE WHERE GROUP_ID=?
      GET_NODE_DATA: SELECT GROUP_ID, NODE_ID, PROPERTY_MAP, LAST_HEARTBEAT, IS_NEW_NODE FROM CLUSTER_NODE_STATUS_TABLE WHERE GROUP_ID=? AND NODE_ID=?
      DELETE_COORDINATOR: DELETE FROM LEADER_STATUS_TABLE WHERE GROUP_ID =? AND LAST_HEARTBEAT < ?
      DELETE_NODE_HEARTBEAT: DELETE FROM CLUSTER_NODE_STATUS_TABLE WHERE NODE_ID =? AND GROUP_ID =?
      DELETE_REMOVED_MEMBER_DETAIL_FOR_NODE: DELETE FROM REMOVED_MEMBERS_TABLE WHERE NODE_ID =? AND REMOVED_MEMBER_ID =? AND  GROUP_ID =?
      CLEAR_NODE_HEARTBEATS: DELETE FROM CLUSTER_NODE_STATUS_TABLE
      CLEAR_COORDINATOR_HEARTBEAT: DELETE FROM LEADER_STATUS_TABLE
      CLEAR_ALL_MEMBERSHIP_EVENTS: DELETE FROM  MEMBERSHIP_EVENT_TABLE
      CLEAN_MEMBERSHIP_EVENTS_FOR_NODE: DELETE FROM MEMBERSHIP_EVENT_TABLE WHERE NODE_ID =?

   type: MySQL
   version: default

  -
   mappings:
      IS_LEADER_STATUS_TABLE_EXISTS: SELECT 1 FROM LEADER_STATUS_TABLE
      IS_CLUSTER_NODE_STATUS_TABLE_EXISTS: SELECT 1 FROM CLUSTER_NODE_STATUS_TABLE
      IS_MEMBERSHIP_EVENT_TABLE_EXISTS: SELECT 1 FROM MEMBERSHIP_EVENT_TABLE
      IS_REMOVED_MEMBERS_TABLE_EXISTS: SELECT 1 FROM REMOVED_MEMBERS_TABLE
      CREATE_LEADER_STATUS_TABLE: CREATE TABLE LEADER_STATUS_TABLE (GROUP_ID VARCHAR(512) NOT NULL, NODE_ID VARCHAR(512) NOT NULL, LAST_HEARTBEAT BIGINT NOT NULL, PRIMARY KEY (GROUP_ID))
      CREATE_CLUSTER_NODE_STATUS_TABLE: CREATE TABLE CLUSTER_NODE_STATUS_TABLE (GROUP_ID VARCHAR(512) NOT NULL, NODE_ID VARCHAR(512) NOT NULL, PROPERTY_MAP BIGINT NOT NULL,IS_NEW_NODE INT NOT NULL, LAST_HEARTBEAT BIGINT NOT NULL, PRIMARY KEY (GROUP_ID,NODE_ID))
      CREATE_MEMBERSHIP_EVENT_TABLE: CREATE TABLE MEMBERSHIP_EVENT_TABLE (GROUP_ID VARCHAR(512) NOT NULL, NODE_ID VARCHAR(512) NOT NULL, CHANGE_TYPE INT NOT NULL, CHANGED_MEMBER_ID VARCHAR(512) NOT NULL)
      CREATE_REMOVED_MEMBERS_TABLE: CREATE TABLE REMOVED_MEMBERS_TABLE (GROUP_ID VARCHAR(512) NOT NULL, NODE_ID VARCHAR(512) NOT NULL, PROPERTY_MAP BIGINT NOT NULL, REMOVED_MEMBER_ID VARCHAR(512) NOT NULL)
      INSERT_COORDINATOR_ROW: INSERT INTO LEADER_STATUS_TABLE (GROUP_ID, NODE_ID, LAST_HEARTBEAT) VALUES (?,?,?)
      INSERT_NODE_HEARTBEAT_ROW: INSERT INTO CLUSTER_NODE_STATUS_TABLE (NODE_ID, LAST_HEARTBEAT, GROUP_ID, PROPERTY_MAP, IS_NEW_NODE) VALUES (?,?,?,?,1)
      INSERT_MEMBERSHIP_EVENT: INSERT INTO MEMBERSHIP_EVENT_TABLE (NODE_ID, GROUP_ID, CHANGE_TYPE, CHANGED_MEMBER_ID) VALUES ( ?,?,?,?)
      INSERT_REMOVED_MEMBER_DETAILS: INSERT INTO REMOVED_MEMBERS_TABLE (NODE_ID, GROUP_ID, REMOVED_MEMBER_ID, PROPERTY_MAP) VALUES ( ?,?,?,?)
      UPDATE_PROPERTIES_MAP: UPDATE CLUSTER_NODE_STATUS_TABLE SET PROPERTY_MAP =? WHERE NODE_ID =? AND GROUP_ID =?
      UPDATE_COORDINATOR_HEARTBEAT: UPDATE LEADER_STATUS_TABLE SET LAST_HEARTBEAT =? WHERE NODE_ID =? AND GROUP_ID =?
      UPDATE_NODE_HEARTBEAT: UPDATE CLUSTER_NODE_STATUS_TABLE SET LAST_HEARTBEAT =? WHERE NODE_ID =? AND GROUP_ID =?
      MARK_NODE_NOT_NEW: UPDATE CLUSTER_NODE_STATUS_TABLE SET IS_NEW_NODE =0 WHERE NODE_ID =? AND GROUP_ID =?
      SELECT_MEMBERSHIP_EVENT: SELECT CHANGE_TYPE, CHANGED_MEMBER_ID, GROUP_ID FROM MEMBERSHIP_EVENT_TABLE WHERE NODE_ID =? ORDER BY CHANGE_TYPE
      SELECT_REMOVED_MEMBER_DETAILS: SELECT REMOVED_MEMBER_ID, PROPERTY_MAP, GROUP_ID FROM REMOVED_MEMBERS_TABLE WHERE NODE_ID =? AND REMOVED_MEMBER_ID =? AND GROUP_ID =?
      GET_COORDINATOR_NODE_ID: SELECT NODE_ID FROM LEADER_STATUS_TABLE WHERE GROUP_ID =?
      GET_COORDINATOR_NODE: SELECT PROPERTY_MAP FROM CLUSTER_NODE_STATUS_TABLE WHERE GROUP_ID =? AND NODE_ID =?
      GET_COORDINATOR_ROW_FOR_NODE_ID: SELECT LAST_HEARTBEAT FROM LEADER_STATUS_TABLE WHERE NODE_ID =? AND GROUP_ID =?
      GET_COORDINATOR_HEARTBEAT: SELECT LAST_HEARTBEAT FROM LEADER_STATUS_TABLE WHERE GROUP_ID =?
      GET_ALL_NODE_HEARTBEAT: SELECT GROUP_ID, NODE_ID, PROPERTY_MAP, LAST_HEARTBEAT, IS_NEW_NODE FROM CLUSTER_NODE_STATUS_TABLE WHERE GROUP_ID=?
      GET_NODE_DATA: SELECT GROUP_ID, NODE_ID, PROPERTY_MAP, LAST_HEARTBEAT, IS_NEW_NODE FROM CLUSTER_NODE_STATUS_TABLE WHERE GROUP_ID=? AND NODE_ID=?
      DELETE_COORDINATOR: DELETE FROM LEADER_STATUS_TABLE WHERE GROUP_ID =? AND LAST_HEARTBEAT < ?
      DELETE_NODE_HEARTBEAT: DELETE FROM CLUSTER_NODE_STATUS_TABLE WHERE NODE_ID =? AND GROUP_ID =?
      DELETE_REMOVED_MEMBER_DETAIL_FOR_NODE: DELETE FROM REMOVED_MEMBERS_TABLE WHERE NODE_ID =? AND REMOVED_MEMBER_ID =? AND  GROUP_ID =?
      CLEAR_NODE_HEARTBEATS: DELETE FROM CLUSTER_NODE_STATUS_TABLE
      CLEAR_COORDINATOR_HEARTBEAT: DELETE FROM LEADER_STATUS_TABLE
      CLEAR_ALL_MEMBERSHIP_EVENTS: DELETE FROM  MEMBERSHIP_EVENT_TABLE
      CLEAN_MEMBERSHIP_EVENTS_FOR_NODE: DELETE FROM MEMBERSHIP_EVENT_TABLE WHERE NODE_ID =?

   type: PostgreSQL
   version: default

  -
   mappings:
      IS_LEADER_STATUS_TABLE_EXISTS: SELECT TOP 1 1 FROM LEADER_STATUS_TABLE
      IS_CLUSTER_NODE_STATUS_TABLE_EXISTS: SELECT TOP 1 1 FROM CLUSTER_NODE_STATUS_TABLE
      IS_MEMBERSHIP_EVENT_TABLE_EXISTS: SELECT TOP 1 1 FROM MEMBERSHIP_EVENT_TABLE
      IS_REMOVED_MEMBERS_TABLE_EXISTS: SELECT TOP 1 1 FROM REMOVED_MEMBERS_TABLE
      CREATE_LEADER_STATUS_TABLE: CREATE TABLE LEADER_STATUS_TABLE (GROUP_ID VARCHAR(512) NOT NULL, NODE_ID VARCHAR(512) NOT NULL, LAST_HEARTBEAT BIGINT NOT NULL, PRIMARY KEY (GROUP_ID))
      CREATE_CLUSTER_NODE_STATUS_TABLE: CREATE TABLE CLUSTER_NODE_STATUS_TABLE (GROUP_ID VARCHAR(512) NOT NULL, NODE_ID VARCHAR(512) NOT NULL, PROPERTY_MAP VARBINARY(8000) NOT NULL,IS_NEW_NODE INT NOT NULL, LAST_HEARTBEAT BIGINT NOT NULL, PRIMARY KEY (GROUP_ID,NODE_ID))
      CREATE_MEMBERSHIP_EVENT_TABLE: CREATE TABLE MEMBERSHIP_EVENT_TABLE (GROUP_ID VARCHAR(512) NOT NULL, NODE_ID VARCHAR(512) NOT NULL, CHANGE_TYPE INT NOT NULL, CHANGED_MEMBER_ID VARCHAR(512) NOT NULL)
      CREATE_REMOVED_MEMBERS_TABLE: CREATE TABLE REMOVED_MEMBERS_TABLE (GROUP_ID VARCHAR(512) NOT NULL, NODE_ID VARCHAR(512) NOT NULL, PROPERTY_MAP VARBINARY(8000) NOT NULL, REMOVED_MEMBER_ID VARCHAR(512) NOT NULL)
      INSERT_COORDINATOR_ROW: INSERT INTO LEADER_STATUS_TABLE (GROUP_ID, NODE_ID, LAST_HEARTBEAT) VALUES (?,?,?)
      INSERT_NODE_HEARTBEAT_ROW: INSERT INTO CLUSTER_NODE_STATUS_TABLE (NODE_ID, LAST_HEARTBEAT, GROUP_ID, PROPERTY_MAP, IS_NEW_NODE) VALUES (?,?,?,?,1)
      INSERT_MEMBERSHIP_EVENT: INSERT INTO MEMBERSHIP_EVENT_TABLE (NODE_ID, GROUP_ID, CHANGE_TYPE, CHANGED_MEMBER_ID) VALUES ( ?,?,?,?)
      INSERT_REMOVED_MEMBER_DETAILS: INSERT INTO REMOVED_MEMBERS_TABLE (NODE_ID, GROUP_ID, REMOVED_MEMBER_ID, PROPERTY_MAP) VALUES ( ?,?,?,?)
      UPDATE_PROPERTIES_MAP: UPDATE CLUSTER_NODE_STATUS_TABLE SET PROPERTY_MAP =? WHERE NODE_ID =? AND GROUP_ID =?
      UPDATE_COORDINATOR_HEARTBEAT: UPDATE LEADER_STATUS_TABLE SET LAST_HEARTBEAT =? WHERE NODE_ID =? AND GROUP_ID =?
      UPDATE_NODE_HEARTBEAT: UPDATE CLUSTER_NODE_STATUS_TABLE SET LAST_HEARTBEAT =? WHERE NODE_ID =? AND GROUP_ID =?
      MARK_NODE_NOT_NEW: UPDATE CLUSTER_NODE_STATUS_TABLE SET IS_NEW_NODE =0 WHERE NODE_ID =? AND GROUP_ID =?
      SELECT_MEMBERSHIP_EVENT: SELECT CHANGE_TYPE, CHANGED_MEMBER_ID, GROUP_ID FROM MEMBERSHIP_EVENT_TABLE WHERE NODE_ID =? ORDER BY CHANGE_TYPE
      SELECT_REMOVED_MEMBER_DETAILS: SELECT REMOVED_MEMBER_ID, PROPERTY_MAP, GROUP_ID FROM REMOVED_MEMBERS_TABLE WHERE NODE_ID =? AND REMOVED_MEMBER_ID =? AND GROUP_ID =?
      GET_COORDINATOR_NODE_ID: SELECT NODE_ID FROM LEADER_STATUS_TABLE WHERE GROUP_ID =?
      GET_COORDINATOR_NODE: SELECT PROPERTY_MAP FROM CLUSTER_NODE_STATUS_TABLE WHERE GROUP_ID =? AND NODE_ID =?
      GET_COORDINATOR_ROW_FOR_NODE_ID: SELECT LAST_HEARTBEAT FROM LEADER_STATUS_TABLE WHERE NODE_ID =? AND GROUP_ID =?
      GET_COORDINATOR_HEARTBEAT: SELECT LAST_HEARTBEAT FROM LEADER_STATUS_TABLE WHERE GROUP_ID =?
      GET_ALL_NODE_HEARTBEAT: SELECT GROUP_ID, NODE_ID, PROPERTY_MAP, LAST_HEARTBEAT, IS_NEW_NODE FROM CLUSTER_NODE_STATUS_TABLE WHERE GROUP_ID=?
      GET_NODE_DATA: SELECT GROUP_ID, NODE_ID, PROPERTY_MAP, LAST_HEARTBEAT, IS_NEW_NODE FROM CLUSTER_NODE_STATUS_TABLE WHERE GROUP_ID=? AND NODE_ID=?
      DELETE_COORDINATOR: DELETE FROM LEADER_STATUS_TABLE WHERE GROUP_ID =? AND LAST_HEARTBEAT < ?
      DELETE_NODE_HEARTBEAT: DELETE FROM CLUSTER_NODE_STATUS_TABLE WHERE NODE_ID =? AND GROUP_ID =?
      DELETE_REMOVED_MEMBER_DETAIL_FOR_NODE: DELETE FROM REMOVED_MEMBERS_TABLE WHERE NODE_ID =? AND REMOVED_MEMBER_ID =? AND  GROUP_ID =?
      CLEAR_NODE_HEARTBEATS: DELETE FROM CLUSTER_NODE_STATUS_TABLE
      CLEAR_COORDINATOR_HEARTBEAT: DELETE FROM LEADER_STATUS_TABLE
      CLEAR_ALL_MEMBERSHIP_EVENTS: DELETE FROM  MEMBERSHIP_EVENT_TABLE
      CLEAN_MEMBERSHIP_EVENTS_FOR_NODE: DELETE FROM MEMBERSHIP_EVENT_TABLE WHERE NODE_ID =?

   type: Microsoft SQL Server
   version: default

  -
   mappings:
      IS_LEADER_STATUS_TABLE_EXISTS: SELECT 1 FROM LEADER_STATUS_TABLE WHERE rownum=1
      IS_CLUSTER_NODE_STATUS_TABLE_EXISTS: SELECT 1 FROM CLUSTER_NODE_STATUS_TABLE WHERE rownum=1
      IS_MEMBERSHIP_EVENT_TABLE_EXISTS: SELECT 1 FROM MEMBERSHIP_EVENT_TABLE WHERE rownum=1
      IS_REMOVED_MEMBERS_TABLE_EXISTS: SELECT 1 FROM REMOVED_MEMBERS_TABLE WHERE rownum=1
      CREATE_LEADER_STATUS_TABLE: CREATE TABLE LEADER_STATUS_TABLE (GROUP_ID VARCHAR2(512) NOT NULL, NODE_ID VARCHAR2(512) NOT NULL, LAST_HEARTBEAT NUMBER NOT NULL, PRIMARY KEY (GROUP_ID))
      CREATE_CLUSTER_NODE_STATUS_TABLE: CREATE TABLE CLUSTER_NODE_STATUS_TABLE (GROUP_ID VARCHAR2(512) NOT NULL, NODE_ID VARCHAR2(512) NOT NULL, PROPERTY_MAP BLOB NOT NULL,IS_NEW_NODE INT NOT NULL, LAST_HEARTBEAT NUMBER NOT NULL, PRIMARY KEY (GROUP_ID,NODE_ID))
      CREATE_MEMBERSHIP_EVENT_TABLE: CREATE TABLE MEMBERSHIP_EVENT_TABLE (GROUP_ID VARCHAR2(512) NOT NULL, NODE_ID VARCHAR2(512) NOT NULL, CHANGE_TYPE INT NOT NULL, CHANGED_MEMBER_ID VARCHAR2(512) NOT NULL)
      CREATE_REMOVED_MEMBERS_TABLE: CREATE TABLE REMOVED_MEMBERS_TABLE (GROUP_ID VARCHAR2(512) NOT NULL, NODE_ID VARCHAR2(512) NOT NULL, PROPERTY_MAP BLOB NOT NULL, REMOVED_MEMBER_ID VARCHAR2(512) NOT NULL)
      INSERT_COORDINATOR_ROW: INSERT INTO LEADER_STATUS_TABLE (GROUP_ID, NODE_ID, LAST_HEARTBEAT) VALUES (?,?,?)
      INSERT_NODE_HEARTBEAT_ROW: INSERT INTO CLUSTER_NODE_STATUS_TABLE (NODE_ID, LAST_HEARTBEAT, GROUP_ID, PROPERTY_MAP, IS_NEW_NODE) VALUES (?,?,?,?,1)
      INSERT_MEMBERSHIP_EVENT: INSERT INTO MEMBERSHIP_EVENT_TABLE (NODE_ID, GROUP_ID, CHANGE_TYPE, CHANGED_MEMBER_ID) VALUES ( ?,?,?,?)
      INSERT_REMOVED_MEMBER_DETAILS: INSERT INTO REMOVED_MEMBERS_TABLE (NODE_ID, GROUP_ID, REMOVED_MEMBER_ID, PROPERTY_MAP) VALUES ( ?,?,?,?)
      UPDATE_PROPERTIES_MAP: UPDATE CLUSTER_NODE_STATUS_TABLE SET PROPERTY_MAP =? WHERE NODE_ID =? AND GROUP_ID =?
      UPDATE_COORDINATOR_HEARTBEAT: UPDATE LEADER_STATUS_TABLE SET LAST_HEARTBEAT =? WHERE NODE_ID =? AND GROUP_ID =?
      UPDATE_NODE_HEARTBEAT: UPDATE CLUSTER_NODE_STATUS_TABLE SET LAST_HEARTBEAT =? WHERE NODE_ID =? AND GROUP_ID =?
      MARK_NODE_NOT_NEW: UPDATE CLUSTER_NODE_STATUS_TABLE SET IS_NEW_NODE =0 WHERE NODE_ID =? AND GROUP_ID =?
      SELECT_MEMBERSHIP_EVENT: SELECT CHANGE_TYPE, CHANGED_MEMBER_ID, GROUP_ID FROM MEMBERSHIP_EVENT_TABLE WHERE NODE_ID =? ORDER BY CHANGE_TYPE
      SELECT_REMOVED_MEMBER_DETAILS: SELECT REMOVED_MEMBER_ID, PROPERTY_MAP, GROUP_ID FROM REMOVED_MEMBERS_TABLE WHERE NODE_ID =? AND REMOVED_MEMBER_ID =? AND GROUP_ID =?
      GET_COORDINATOR_NODE_ID: SELECT NODE_ID FROM LEADER_STATUS_TABLE WHERE GROUP_ID =?
      GET_COORDINATOR_NODE: SELECT PROPERTY_MAP FROM CLUSTER_NODE_STATUS_TABLE WHERE GROUP_ID =? AND NODE_ID =?
      GET_COORDINATOR_ROW_FOR_NODE_ID: SELECT LAST_HEARTBEAT FROM LEADER_STATUS_TABLE WHERE NODE_ID =? AND GROUP_ID =?
      GET_COORDINATOR_HEARTBEAT: SELECT LAST_HEARTBEAT FROM LEADER_STATUS_TABLE WHERE GROUP_ID =?
      GET_ALL_NODE_HEARTBEAT: SELECT GROUP_ID, NODE_ID, PROPERTY_MAP, LAST_HEARTBEAT, IS_NEW_NODE FROM CLUSTER_NODE_STATUS_TABLE WHERE GROUP_ID=?
      GET_NODE_DATA: SELECT GROUP_ID, NODE_ID, PROPERTY_MAP, LAST_HEARTBEAT, IS_NEW_NODE FROM CLUSTER_NODE_STATUS_TABLE WHERE GROUP_ID=? AND NODE_ID=?
      DELETE_COORDINATOR: DELETE FROM LEADER_STATUS_TABLE WHERE GROUP_ID =? AND LAST_HEARTBEAT < ?
      DELETE_NODE_HEARTBEAT: DELETE FROM CLUSTER_NODE_STATUS_TABLE WHERE NODE_ID =? AND GROUP_ID =?
      DELETE_REMOVED_MEMBER_DETAIL_FOR_NODE: DELETE FROM REMOVED_MEMBERS_TABLE WHERE NODE_ID =? AND REMOVED_MEMBER_ID =? AND  GROUP_ID =?
      CLEAR_NODE_HEARTBEATS: DELETE FROM CLUSTER_NODE_STATUS_TABLE
      CLEAR_COORDINATOR_HEARTBEAT: DELETE FROM LEADER_STATUS_TABLE
      CLEAR_ALL_MEMBERSHIP_EVENTS: DELETE FROM  MEMBERSHIP_EVENT_TABLE
      CLEAN_MEMBERSHIP_EVENTS_FOR_NODE: DELETE FROM MEMBERSHIP_EVENT_TABLE WHERE NODE_ID =?

   type: Oracle
   version: default

  -
     mappings:
        IS_LEADER_STATUS_TABLE_EXISTS: SELECT * FROM LEADER_STATUS_TABLE
        IS_CLUSTER_NODE_STATUS_TABLE_EXISTS: SELECT * FROM CLUSTER_NODE_STATUS_TABLE
        IS_MEMBERSHIP_EVENT_TABLE_EXISTS: SELECT * FROM MEMBERSHIP_EVENT_TABLE
        IS_REMOVED_MEMBERS_TABLE_EXISTS: SELECT * FROM REMOVED_MEMBERS_TABLE
        CREATE_LEADER_STATUS_TABLE: CREATE TABLE LEADER_STATUS_TABLE (GROUP_ID VARCHAR(508) NOT NULL, NODE_ID VARCHAR(512) NOT NULL, LAST_HEARTBEAT BIGINT NOT NULL, PRIMARY KEY (GROUP_ID))
        CREATE_CLUSTER_NODE_STATUS_TABLE: CREATE TABLE CLUSTER_NODE_STATUS_TABLE (GROUP_ID VARCHAR(508) NOT NULL, NODE_ID VARCHAR(512) NOT NULL, PROPERTY_MAP BLOB NOT NULL,IS_NEW_NODE INT NOT NULL, LAST_HEARTBEAT BIGINT NOT NULL, PRIMARY KEY (GROUP_ID,NODE_ID))
        CREATE_MEMBERSHIP_EVENT_TABLE: CREATE TABLE MEMBERSHIP_EVENT_TABLE (GROUP_ID VARCHAR(508) NOT NULL, NODE_ID VARCHAR(512) NOT NULL, CHANGE_TYPE INT NOT NULL, CHANGED_MEMBER_ID VARCHAR(512) NOT NULL)
        CREATE_REMOVED_MEMBERS_TABLE: CREATE TABLE REMOVED_MEMBERS_TABLE (GROUP_ID VARCHAR(508) NOT NULL, NODE_ID VARCHAR(512) NOT NULL, PROPERTY_MAP BLOB NOT NULL, REMOVED_MEMBER_ID VARCHAR(512) NOT NULL)
        INSERT_COORDINATOR_ROW: INSERT INTO LEADER_STATUS_TABLE (GROUP_ID, NODE_ID, LAST_HEARTBEAT) VALUES (?,?,?)
        INSERT_NODE_HEARTBEAT_ROW: INSERT INTO CLUSTER_NODE_STATUS_TABLE (NODE_ID, LAST_HEARTBEAT, GROUP_ID, PROPERTY_MAP, IS_NEW_NODE) VALUES (?,?,?,?,1)
        INSERT_MEMBERSHIP_EVENT: INSERT INTO MEMBERSHIP_EVENT_TABLE (NODE_ID, GROUP_ID, CHANGE_TYPE, CHANGED_MEMBER_ID) VALUES ( ?,?,?,?)
        INSERT_REMOVED_MEMBER_DETAILS: INSERT INTO REMOVED_MEMBERS_TABLE (NODE_ID, GROUP_ID, REMOVED_MEMBER_ID, PROPERTY_MAP) VALUES ( ?,?,?,?)
        UPDATE_PROPERTIES_MAP: UPDATE CLUSTER_NODE_STATUS_TABLE SET PROPERTY_MAP =? WHERE NODE_ID =? AND GROUP_ID =?
        UPDATE_COORDINATOR_HEARTBEAT: UPDATE LEADER_STATUS_TABLE SET LAST_HEARTBEAT =? WHERE NODE_ID =? AND GROUP_ID =?
        UPDATE_NODE_HEARTBEAT: UPDATE CLUSTER_NODE_STATUS_TABLE SET LAST_HEARTBEAT =? WHERE NODE_ID =? AND GROUP_ID =?
        MARK_NODE_NOT_NEW: UPDATE CLUSTER_NODE_STATUS_TABLE SET IS_NEW_NODE =0 WHERE NODE_ID =? AND GROUP_ID =?
        SELECT_MEMBERSHIP_EVENT: SELECT CHANGE_TYPE, CHANGED_MEMBER_ID, GROUP_ID FROM MEMBERSHIP_EVENT_TABLE WHERE NODE_ID =? ORDER BY CHANGE_TYPE
        SELECT_REMOVED_MEMBER_DETAILS: SELECT REMOVED_MEMBER_ID, PROPERTY_MAP, GROUP_ID FROM REMOVED_MEMBERS_TABLE WHERE NODE_ID =? AND REMOVED_MEMBER_ID =? AND GROUP_ID =?
        GET_COORDINATOR_NODE_ID: SELECT NODE_ID FROM LEADER_STATUS_TABLE WHERE GROUP_ID =?
        GET_COORDINATOR_NODE: SELECT PROPERTY_MAP FROM CLUSTER_NODE_STATUS_TABLE WHERE GROUP_ID =? AND NODE_ID =?
        GET_COORDINATOR_ROW_FOR_NODE_ID: SELECT LAST_HEARTBEAT FROM LEADER_STATUS_TABLE WHERE NODE_ID =? AND GROUP_ID =?
        GET_COORDINATOR_HEARTBEAT: SELECT LAST_HEARTBEAT FROM LEADER_STATUS_TABLE WHERE GROUP_ID =?
        GET_ALL_NODE_HEARTBEAT: SELECT GROUP_ID, NODE_ID, PROPERTY_MAP, LAST_HEARTBEAT, IS_NEW_NODE FROM CLUSTER_NODE_STATUS_TABLE WHERE GROUP_ID=?
        GET_NODE_DATA: SELECT GROUP_ID, NODE_ID, PROPERTY_MAP, LAST_HEARTBEAT, IS_NEW_NODE FROM CLUSTER_NODE_STATUS_TABLE WHERE GROUP_ID=? AND NODE_ID=?
        DELETE_COORDINATOR: DELETE FROM LEADER_STATUS_TABLE WHERE GROUP_ID =? AND LAST_HEARTBEAT < ?
        DELETE_NODE_HEARTBEAT: DELETE FROM CLUSTER_NODE_STATUS_TABLE WHERE NODE_ID =? AND GROUP_ID =?
        DELETE_REMOVED_MEMBER_DETAIL_FOR_NODE: DELETE FROM REMOVED_MEMBERS_TABLE WHERE NODE_ID =? AND REMOVED_MEMBER_ID =? AND  GROUP_ID =?
        CLEAR_NODE_HEARTBEATS: DELETE FROM CLUSTER_NODE_STATUS_TABLE
        CLEAR_COORDINATOR_HEARTBEAT: DELETE FROM LEADER_STATUS_TABLE
        CLEAR_ALL_MEMBERSHIP_EVENTS: DELETE FROM  MEMBERSHIP_EVENT_TABLE
        CLEAN_MEMBERSHIP_EVENTS_FOR_NODE: DELETE FROM MEMBERSHIP_EVENT_TABLE WHERE NODE_ID =?

     type: DB2
     version: default
